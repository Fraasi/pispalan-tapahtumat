{"version":3,"sources":["components/Event/index.js","components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["Event","props","_props$data","data","name","url","events","includes","onTitleClick","error_msg","react_default","a","createElement","lib","header","concat","error_title","onSelect","className","href","target","rel","key","slice","cleanedName","charAt","toUpperCase","replace","today","Date","todayDay","getDate","todayMonth","getMonth","isThereEventToday","filteredPastEvents","sort","ev1","ev2","startTimeStamp","filter","event","endTimeStamp","endDate","endDay","endMonth","startDate","startDay","startMonth","eventRows","map","i","happening","endDateParsed","dateParsed","eventToday","todayBGColor","style","backgroundColor","length","Fragment","About","options","onOpenEnd","window","dataLayer","push","actions","waves","modal","trigger","title","top","right","position","client","Stitch","initializeDefaultAppClient","db","getServiceClient","RemoteMongoClient","factory","App","_useState","useState","_useState2","Object","slicedToArray","setData","_useState3","_useState4","errorMsg","setErrorMsg","_useState5","_useState6","expanded","setExpanded","useEffect","document","querySelector","auth","loginWithCredential","AnonymousCredential","then","user","collection","find","_id","asArray","docs","returnData","first","second","console","log","catch","err","error","components_About","offLabel","onLabel","onChange","prev","M_Collapsible","close","open","toString","size","flashing","accordion","el","components_Event","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44db9b6b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CollapsibleItem } from 'react-materialize'\r\nimport './event.css'\r\n\r\nconst Event = (props) => {\r\n\r\n  let { name, url, events } = props.data\r\n  // skip non pispala venues\r\n  // TODO: pass 'showOnlyPispalaVenues' state via props here\r\n  if (true) {\r\n    const nonPispala = ['dogs_home', 'maanalainen', 'visit_tampere', 'huurupiilo']\r\n    if (nonPispala.includes(name)) return null\r\n  }\r\n\r\n  // onSelect is not a function error without this\r\n  const onTitleClick = () => { }\r\n\r\n  if (events.error_msg) {\r\n    return (\r\n      <CollapsibleItem\r\n        header={`${events.error_title} (${name}) *!*!*`}\r\n        onSelect={onTitleClick}\r\n      >\r\n        <span className=\"sub-header\">Käyhän nettisivuilla&nbsp;<a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></span><br /><br />\r\n        <ul>\r\n          {\r\n            <li key={'error'}>\r\n              {events.error_msg}\r\n            </li>\r\n          }\r\n        </ul>\r\n      </CollapsibleItem>\r\n    )\r\n  }\r\n\r\n  if (name === 'vastavirta') events = events.slice(0, 10)\r\n  const cleanedName = `${name.charAt(0).toUpperCase()}${name.slice(1)}`.replace(/_/g, ' ')\r\n  const today = new Date()\r\n  const todayDay = today.getDate()\r\n  const todayMonth = today.getMonth()\r\n  let isThereEventToday = false\r\n\r\n  const filteredPastEvents = events\r\n    .sort((ev1, ev2) => ev1.startTimeStamp < ev2.startTimeStamp ? -1 : 1)\r\n    .filter(event => {\r\n      const { startTimeStamp, endTimeStamp } = event\r\n      if (endTimeStamp) {\r\n        const endDate = new Date(endTimeStamp)\r\n        const endDay = endDate.getDate()\r\n        const endMonth = endDate.getMonth()\r\n        return !(endDay < todayDay && endMonth <= todayMonth)\r\n      } \r\n      const startDate = new Date(startTimeStamp)\r\n      const startDay = startDate.getDate()\r\n      const startMonth = startDate.getMonth()\r\n      if (startDay < todayDay && startMonth <= todayMonth) return false\r\n      return true\r\n    })\r\n\r\n  const eventRows = filteredPastEvents.map((event, i) => {\r\n    const { startTimeStamp, endTimeStamp, event: happening } = event\r\n    const startDate = new Date(startTimeStamp)\r\n    let endDateParsed = ''\r\n    if (endTimeStamp) {\r\n      const endDate = new Date(endTimeStamp)\r\n      endDateParsed = `–${endDate.getDate()}.${endDate.getMonth() + 1}`\r\n    }\r\n    const dateParsed = `${startDate.getDate()}.${startDate.getMonth() + 1}${endDateParsed}`\r\n    const eventToday = ( (startDate.getDate() === today.getDate()) && (startDate.getMonth() === today.getMonth()) )\r\n    if (eventToday) isThereEventToday = true\r\n    const todayBGColor = eventToday ? 'rgba(39,169,157,0.7)' : ''\r\n\r\n    return (\r\n      <tr key={i} style={{ backgroundColor: todayBGColor }}>\r\n        <td>{dateParsed}</td><td>—</td><td>{happening}</td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <CollapsibleItem\r\n      header={`${cleanedName} (${filteredPastEvents.length}) ${isThereEventToday ? '!' : ''}`}\r\n      onSelect={onTitleClick}\r\n    >\r\n      <span className=\"sub-header\">Aukioloajat & tarkemmat tiedot <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a></span>\r\n      {\r\n        name === 'hirvitalo' &&\r\n        <>\r\n          <br />\r\n          <span className=\"sub-header\">Kansankeittiö lauantaisin <a href=\"https://www.facebook.com/groups/294496307351291/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.facebook.com/groups/294496307351291/</a></span>\r\n        </>\r\n      }\r\n\r\n      <br /><br />\r\n      <table>\r\n        <tbody>\r\n          {\r\n            eventRows\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </CollapsibleItem>\r\n  )\r\n}\r\n\r\nexport default Event\r\n","import React from 'react'\r\nimport { Modal, Button } from 'react-materialize'\r\nimport './about.css'\r\n\r\nconst About = () => {\r\n  const onModalOpen = () => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n      window.dataLayer.push({ 'event': 'about_modal_opened' })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      options={{\r\n        onOpenEnd: onModalOpen\r\n      }}\r\n      header=\"Pispalan tapahtumista\"\r\n      actions={\r\n        <Button waves=\"green\" modal=\"close\">\r\n          Sulje\r\n        </Button>\r\n      }\r\n      trigger={\r\n        <Button\r\n          title=\"Info\"\r\n          style={{\r\n            top: '10px',\r\n            right: '10px',\r\n            position: 'absolute'\r\n          }}\r\n        >?</Button>\r\n      }\r\n    >\r\n      <p>\r\n        Pispalassa on paljon pieniä eri yhdistyksiä, jotka järjestävät kaikenlaisia tapahtumia ja tekemisiä.\r\n        Tämä on pieni yritys koota kaikki samalle sivustolle, jotta olisi helpompi löytää mitä harjulla milloinkin tapahtuu.\r\n      </p>\r\n      <p>\r\n        <strong>vinkki: </strong>\r\n        Tämä nettisivu(<a href=\"https://fraasi.github.io/pispalan-tapahtumat/\" target=\"_blank\" rel=\"noopener noreferrer\">https://fraasi.github.io/pispalan-tapahtumat/</a>) on suunniteltu kännykälle ja toimii parhaiten kun avaa nettisivun luurin selaimessa ja valitsee asetuksista 'Add to home screen', jolloin lähtöruudulle napsahtaa kuvake jota klikkaamalla sivu toimii kuten muutkin 'äpit'.\r\n      </p>\r\n      <p>\r\n        <strong>huom: </strong>\r\n        Päivämäärien kanssa työskentely on kutakuinkin vaikeaa, joten jotain erheitä on odotettavissa. Korjailen niitä sitä mukaa kun niitä ilmenee ja aika antaa myöten.\r\n      </p>\r\n      <p>\r\n        Jos sivulta löytyy virheitä tai on jotain muuta valitettavaa tai haluat ehdottaa jotain paikkaa listalle, sähköpostia voi lähettää osoitteeseen fraasi.gh@gmail.com\r\n      </p>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Preloader, Collapsible, Switch } from 'react-materialize'\r\nimport Event from './components/Event'\r\nimport About from './components/About'\r\nimport './App.css'\r\n\r\nimport { Stitch, RemoteMongoClient, AnonymousCredential } from 'mongodb-stitch-browser-sdk'\r\n\r\nconst client = Stitch.initializeDefaultAppClient('tapahtumat-api-lffsa')\r\nconst db = client.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas').db('tapahtumat')\r\n\r\nfunction App() {\r\n\r\n  const [data, setData] = useState(null)\r\n  const [errorMsg, setErrorMsg] = useState(null)\r\n  const [expanded, setExpanded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    document.querySelector('.switch').title = 'Avaa/sulje kaikki'\r\n    client.auth.loginWithCredential(new AnonymousCredential())\r\n      .then(user => {\r\n        return db.collection('pispala').find({}, { data: 1, _id: 0 }).asArray()\r\n      }\r\n      ).then(docs => {\r\n        const returnData = docs[0].data.sort((first, second) => first.name < second.name ? -1 : 1)\r\n        setData(() => returnData)\r\n        console.log('data', returnData)\r\n      }).catch(err => {\r\n        console.error('error', err)\r\n        setErrorMsg(() => err)\r\n      })\r\n  }, [])\r\n\r\n  const onSwitchChange = () => {\r\n    setExpanded(prev => !prev)\r\n    if (expanded) document.querySelector('.collapsible.expandable').M_Collapsible.close()\r\n    else document.querySelector('.collapsible.expandable').M_Collapsible.open()\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1 className=\"title\">\r\n          Pispalan Tapahtumat\r\n        </h1>\r\n        <About />\r\n        <Switch\r\n          offLabel=\"\"\r\n          onLabel=\"\"\r\n          onChange={onSwitchChange}\r\n        />\r\n      </header>\r\n      {\r\n        errorMsg !== null\r\n          ? (<div className=\"error-loader\">{errorMsg.toString()}</div>)\r\n          : data === null\r\n            ? (<div className=\"error-loader\">\r\n              Haetaan tapahtumia...<br /><br />\r\n              <Preloader size=\"small\" flashing />\r\n            </div>)\r\n            : (<Collapsible accordion={false} >\r\n              {\r\n                data.map((el, i) => {\r\n                  return <Event data={el} key={el.name}></Event>\r\n                })\r\n              }\r\n            </Collapsible>)\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}